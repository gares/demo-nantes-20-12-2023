%%%%%%%%%%% syntax %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% terms
kind term type.

type global  string -> term.

type app term -> term -> term.
type lam (term -> term) -> term.
type let term -> ty -> (term -> term) -> term.
type eq  term -> term -> term.


% type expressions
kind tye type.

type (==>) tye -> tye -> tye.
type int   tye.
type bool  tye.
type list  tye -> tye.
type pair  tye -> tye -> tye.

% types
kind ty type.

type all    eq? -> (tye -> ty) -> ty.
type mono   tye -> ty.

kind eq? type.

type any eq?.
type eqt eq?.

%%%%%%%%%%%% typing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred of i:term, o:ty.

of (global "1")      (mono int).
of (global "2")      (mono int).
of (global "3")      (mono int).
of (global "plus")   (mono (int ==> int ==> int)).

of (global "[]")    (all any x\ mono (list x)).
of (global "::")    (all any x\ mono (x ==> list x ==> list x)).
of (global "size")  (all any x\ mono (list x ==> int)).
of (global "undup") (all eqt x\ mono (list x ==> list x)).

of (global ",")     (all any x\ all any y\ mono (x ==> y ==> (pair x y))).

% accumulate hm.
% accumulate j.

%%%%%%%%%%%% type schema elimination %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
pred specialize i:ty, o:tye.

specialize (mono T) T.
specialize (all any F) T :- specialize (F Fresh_) T.
specialize (all eqt F) T :- specialize (F Fresh) T, eqbar Fresh.

pred eqbar i:tye.

eqbar bool.
eqbar int.
eqbar (list A) :- eqbar A.
eqbar (pair A B) :- eqbar A, eqbar B.

eqbar T :- var T, new_constraint (eqbar T) [T,_].

eqbar T :- eqtype-error T.

%%%%%%%%%%%%% type schema introduction %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% theta carries the list of type variables for which eqbar has to hold
pred theta i:list tye.

theta L :- new_constraint (theta L) [_].

% gammabar is not a real constraint, but rather a query to the meta level to
% compute a polymorphic type out of a monomorphic one and its context
pred gammabar i:ty, o:ty.

gammabar (mono T) TS :-
  new_constraint (gammabar (mono T) TS) [_].

% constraint store %
constraint of gammabar eqbar theta {

rule (theta L)                   % matched
     \  (G ?- gammabar T TS)     % matched and removed
     |  (generalize L G T POLYT) % guard + syntesis
    <=> (TS = POLYT).            % new goal

rule (eqbar V) \ (theta L) | (not(mem L V)) <=> (theta [V | L]).

}

pred generalize i:list tye, i:list prop, i:ty, o:ty.
generalize Theta Gamma (mono T) PolyT :-
  free-ty (mono T) [] VT,
  free-gamma Gamma [] VGamma,
  filter VT (x\ not(mem VGamma x)) ToQuantify,
  bind ToQuantify Theta T PolyT.

% computation of free (unification) variables %%%%%%%%%%%%%%%%%%%%%%%
pred free-ty i:ty, i:list tye, o:list tye.
free-ty (mono X) L L1 :- free X L L1.
free-ty (all _ F) L L1 :- pi x\ free-ty (F x) L L1.

pred free-gamma i:list prop, i:list tye, o:list tye.
free-gamma [] L L.
free-gamma [of _ T|X] L L2 :- free-ty T L L1, free-gamma X L1 L2.

pred free i:tye, i:list tye, o:list tye.
free int L L.
free bool L L.
free (list A) L L1 :- free A L L1.
free (pair A B) L L2 :- free A L L1, free B L1 L2.
free (A ==> B) L L2 :- free A L L1, free B L1 L2.
free (uvar _ _ as X) L L1 :- if (mem L X) (L1 = L) (L1 = [X|L]).

% quantification (binding) of a list of variables %%%%%%%%%%%%%%%%%%%%%%%
pred bind i:list tye, i:list tye, i:tye, o:ty.
bind [] _ T (mono T1) :- copy T T1.
bind [X|XS] Theta T (all E x\ T1 x) :-
  if (mem Theta X) (E = eqt) (E = any),
  pi c\ copy X c => bind XS Theta T (T1 c).

pred copy i:tye, o:tye.
copy int int.
copy bool bool.
copy (A ==> B) (A1 ==> B1) :- copy A A1, copy B B1.
copy (list A) (list A1) :- copy A A1.
copy (pair A B) (pair A1 B1) :- copy A A1, copy B B1.
copy (uvar U L) (uvar U L).

% boring stuff %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred filter i:list A, i:(A -> prop), o:list A.
filter [] _ [].
filter [X|XS] P [X|YS] :- P X, !, filter XS P YS.
filter [_|XS] P YS :- filter XS P YS.

pred mem! i:list A, o:A.
mem! [X|_] X :- !.
mem! [_|XS] X :- mem XS X.

% 'uvar X L' is the frozen 'X' and its arguments 'L'
pred mem i:list tye, i:tye.
mem L (uvar X _) :- mem! L (uvar X Fresh_).

pred assert i:term, i:tye, i:tye.
assert _ TY ETY :- TY = ETY, !.
assert T TY ETY :- print "KO: term (" {pp T} ") has type (" {ppt TY} ") but its context expects (" {ppt ETY} ")\n", halt.

pred eqtype-error i:tye.
eqtype-error T :- print "KO: type (" {ppt T} ") has no equality\n", halt.

pred new_constraint i:prop, i:A.
new_constraint P X :- declare_constraint P X.

pred no-parens.

pred fname i:string, o:string.
fname X F :-
  Rex is X ^ ".*",
  std.findall (std.mem {names} N, pp N S, rex.match Rex S) L,
  if (L = []) (F = X) (F is X ^ {std.any->string {std.length L}}).

pred pp i:term, o:string.
pp (lam F) S :- pi x\ fname "x" X, (pp x X :- !) => S is "(fun " ^ {pp x} ^ " -> " ^ {pp (F x)} ^ ")".
pp (let E uvar F) S :- pi x\ fname "f" X, (pp x X :- !) => S is "let " ^ {pp x} ^ " = " ^ {pp E} ^ " in " ^ {pp (F x)}.
pp (let E Ty F) S :- pi x\ fname "f" X, (pp x X :- !) => S is "let " ^ {pp x} ^ " : " ^ {ppty Ty} ^ " = " ^ {pp E} ^ " in " ^ {pp (F x)}.
pp (app (app (global ",") A) B) S :- !, S is "(" ^ {pp A} ^ ", " ^ {pp B} ^ ")".
pp (app (app (global "::") A) B) S :- !, S is "(" ^ {pp A} ^ " :: " ^ {pp B} ^ ")".
pp (app H A) S :- no-parens, S is {pp H} ^ " " ^ {pp A}.
pp (app (app _ _ as H) A) S :- S is "(" ^ {no-parens => pp H} ^ " " ^ {pp A} ^")".
pp (app H A) S :- S is "(" ^ {pp H} ^ " " ^ {pp A} ^ ")".
pp (global S) S.
pp (eq A B) S :- S is {pp A} ^ " = " ^ {pp B}.
pp (uvar X _) S :- std.any->string X S.
pp N S :- name N, std.any->string N S.


pred ppt i:tye, o:string.
ppt (A ==> B) S :- S is {ppt A} ^ " ==> " ^ {ppt B}.
ppt (pair A B) S :- S is {ppt A} ^ " * " ^ {ppt B}.
ppt (list A) S :- S is "list " ^ {ppt A}.
ppt int "int". 
ppt bool "bool". 
ppt (uvar X _) S :- std.any->string X S.

pred ppty i:ty, o:string.
ppty (mono T) S :- ppt T S.
ppty (all any F) S :- pi x\ fname "'a" A, (ppt x A :- !) => ppty (F x) S.
ppty (all eqt F) S :- pi x\ fname "''a" A, (ppt x A :- !) => ppty (F x) S.

pred kwd i:string.
kwd "1".
kwd "2".
kwd "3".
kwd "[]".
kwd "fun".
kwd "let".
kwd "=".
kwd ",".

pred parse i:list string, o:list string, o:list term.
% parse L _ _ :- print "n" L, fail.
parse [] [] [].
parse ([K|_] as X) R [T|TS] :- kwd K, !, parse1 X S T, parse S R TS.
parse ["("|L] S [T|TS] :- !, parse L R TL, mk-app TL T, parse R S TS.
parse [")"|L] L [] :- !.
parse (["in"|_] as X) X [] :- !.
parse [X|S] Rest [H|HS] :- !, parse1 [X] [] H, parse S Rest HS.

pred mk-app i:list term, o:term.
% mk-app L _ :- print L, fail.
mk-app [X] X.
mk-app L R :- std.appendR Left [global "="|Right] L, !, R = eq {mk-app Left} {mk-app Right}.
mk-app L R :- std.appendR Left [global ","|Right] L, !, R = app (app (global ",") {mk-app Left}) {mk-app Right}.
mk-app [X,Y|XS] R :- mk-app [app X Y|XS] R.

pred parse1 i:list string, o:list string, o:term.
%parse1 L _ _ :- print "1" L, fail.
parse1 ["1"|S] S (global "1") :- !.
parse1 ["2"|S] S (global "2") :- !.
parse1 ["3"|S] S (global "3") :- !.
parse1 [","|S] S (global ",") :- !.
parse1 ["="|S] S (global "=") :- !.
parse1 ["[]"|S] S (global "[]") :- !.
parse1 ["fun",V,"->"|S] R (lam F) :- !, pi x\ (parse1 [V] [] x :- !) => parse1 S R (F x).
parse1 ["let",V,"="|S] R (let E Ty_ F) :- !, parse1 S ["in"|R1] E, (pi x\ (parse1 [V] [] x :- !) => parse1 R1 R (F x)).
parse1 ["let",V,V2,"="|S] R (let (lam E) Ty_ F) :- !, (pi x\ (parse1 [V2] [] x :- !) => parse1 S ["in"|R1] (E x)), (pi x\ (parse1 [V] [] x :- !) => parse1 R1 R (F x)).
parse1 L R T :- parse L R TL, mk-app TL T.

pred parser i:string, o:term.
parser S T :- rex.split "\\( +\\|\\b\\)" S L, std.filter L (x\not(x = "")) L1, parse1 L1 [] T.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% A bit too simple...
% of X (mono T) :- var X, new_constraint (of X (mono T)) [X].
% constraint of gammabar eqbar theta {
%   rule (of X T1) \ (of X T2) <=> (T1 = T2).
% }

pred err.
of X (mono ETY) :- not err, !, err => of X (mono TY), assert X TY ETY.
of X (mono _) :- print "KO: term (" {pp X} ") has no type\n", halt.

pred typecheck i:term.
typecheck T :-
  print "Checking:" {pp T},
  theta [],
  of T TY, !,
  print {pp T} " : " {ppty TY},
%  print, print_constraints,
  print.

pred check i:string.
check S :-
  parser S Ast, !, typecheck Ast.

pred tests i:list string.
tests [X] :- test S X PL, std.assert! (parser S PL) "parser error", typecheck PL.

main :- test S _ Ast, print S, std.assert! (parser S Ast1) "parser error", std.assert! (Ast1 = Ast) "parser nuts", fail.

pred test o:string, o:string, o:term.
test "3 = 2" "1" (eq (global "3") (global "2")).
test "let id = fun x -> x in id []" "2" (let (lam x\x) Ty_ id\ app id (global "[]")).
test "let id x = x in id []" "2" (let (lam x\x) Ty_ id\ app id (global "[]")).

test "let id x = x in id ( [] , 1 )" "3" (let (lam x\x) Ty_ id\ app id (app (app (global ",")  (global "[]")) (global "1"))).

test "let refl x = x = x in refl []" "4" (let (lam x\ eq x x) Ty_ refl\ app refl (global "[]")).

test "let refl x = x = x in refl 1" "5" (let (lam x\ eq x x) Ty_ refl\ app refl (global "1")).
/*          
 "6" (eq (app (app (global ",") (global "1")) (global "1"))
             (app (app (global ",") H)            H)).
 "-7" (eq (app (app (global ",") (global "1")) (global "[]"))
              (app (app (global ",") H)            H)).
*/

test "(fun x -> x) = (fun x -> x)" "-1" (eq (lam x\x) (lam x\x)).

test "let refl x = x = x in refl (fun x -> x)" "-2" (let (lam x\ eq x x) Ty_ refl\ app refl (lam x\x)).

test "1 = []" "-3" (eq (global "1") (global "[]")).

test "(1,1) = (fun x -> 2) 3" "-4" (eq (app (app (global ",") (global "1")) (global "1")) (app (lam (_\global "2")) (global "3"))).
 
% test "xxx" "-5" (global "xxx").

test "(fun x -> x x) (fun x -> x x)" "-6" (app (lam x\app x x) (lam x\app x x)).

